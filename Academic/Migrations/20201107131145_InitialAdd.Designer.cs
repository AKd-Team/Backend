// <auto-generated />
using System;
using System.Collections;
using Academic.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Academic.Migrations
{
    [DbContext(typeof(academicContext))]
    [Migration("20201107131145_InitialAdd")]
    partial class InitialAdd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Academic.Entities.Admin", b =>
                {
                    b.Property<int>("IdAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_admin")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Cnp")
                        .HasColumnName("cnp")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<int?>("IdSpecializare")
                        .HasColumnName("id_specializare")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_user")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('users_id_user_seq'::regclass)");

                    b.Property<string>("Mail")
                        .HasColumnName("mail")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nume")
                        .HasColumnName("nume")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<BitArray>("PHash")
                        .HasColumnName("p_hash")
                        .HasColumnType("bit varying(255)");

                    b.Property<BitArray>("PSalt")
                        .HasColumnName("p_salt")
                        .HasColumnType("bit varying(255)");

                    b.Property<string>("Prenume")
                        .HasColumnName("prenume")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TipUtilizator")
                        .HasColumnName("tip_utilizator")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("IdAdmin")
                        .HasName("admin_pkey");

                    b.HasIndex("IdSpecializare");

                    b.ToTable("admin");
                });

            modelBuilder.Entity("Academic.Entities.Contractdestudiu", b =>
                {
                    b.Property<int>("IdStudent")
                        .HasColumnName("id_student")
                        .HasColumnType("integer");

                    b.Property<int>("AnDeStudiu")
                        .HasColumnName("an_de_studiu")
                        .HasColumnType("integer");

                    b.Property<string>("AnCalendaristic")
                        .HasColumnName("an_calendaristic")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Cod")
                        .HasColumnName("cod")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("IdStudent", "AnDeStudiu", "AnCalendaristic")
                        .HasName("pk_contract_de_studiu");

                    b.ToTable("contractdestudiu");
                });

            modelBuilder.Entity("Academic.Entities.Criteriu", b =>
                {
                    b.Property<int>("IdCriteriu")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_criteriu")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Descriere")
                        .HasColumnName("descriere")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("IdCriteriu")
                        .HasName("criteriu_pkey");

                    b.ToTable("criteriu");
                });

            modelBuilder.Entity("Academic.Entities.Detaliucontract", b =>
                {
                    b.Property<int>("IdMaterie")
                        .HasColumnName("id_materie")
                        .HasColumnType("integer");

                    b.Property<int>("IdStudent")
                        .HasColumnName("id_student")
                        .HasColumnType("integer");

                    b.Property<int>("AnDeStudiu")
                        .HasColumnName("an_de_studiu")
                        .HasColumnType("integer");

                    b.Property<string>("AnCalendaristic")
                        .HasColumnName("an_calendaristic")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DataExamen")
                        .HasColumnName("data_examen")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataPromovarii")
                        .HasColumnName("data_promovarii")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataRestanta")
                        .HasColumnName("data_restanta")
                        .HasColumnType("date");

                    b.Property<int?>("Nota")
                        .HasColumnName("nota")
                        .HasColumnType("integer");

                    b.Property<int?>("NotaRestanta")
                        .HasColumnName("nota_restanta")
                        .HasColumnType("integer");

                    b.Property<bool?>("Promovata")
                        .HasColumnName("promovata")
                        .HasColumnType("boolean");

                    b.Property<int?>("Semestru")
                        .HasColumnName("semestru")
                        .HasColumnType("integer");

                    b.HasKey("IdMaterie", "IdStudent", "AnDeStudiu", "AnCalendaristic")
                        .HasName("pk_detaliu_contract");

                    b.HasIndex("IdStudent", "AnDeStudiu", "AnCalendaristic");

                    b.ToTable("detaliucontract");
                });

            modelBuilder.Entity("Academic.Entities.Facultate", b =>
                {
                    b.Property<int>("IdFacultate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_facultate")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nume")
                        .HasColumnName("nume")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("IdFacultate")
                        .HasName("facultate_pkey");

                    b.ToTable("facultate");
                });

            modelBuilder.Entity("Academic.Entities.Formatie", b =>
                {
                    b.Property<int>("IdFormatie")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_formatie")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IdSpecializare")
                        .HasColumnName("id_specializare")
                        .HasColumnType("integer");

                    b.Property<string>("AnStudiu")
                        .HasColumnName("an_studiu")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Grupa")
                        .HasColumnName("grupa")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("SemiGrupa")
                        .HasColumnName("semi_grupa")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("IdFormatie", "IdSpecializare")
                        .HasName("pk_formatie");

                    b.HasIndex("IdSpecializare");

                    b.ToTable("formatie");
                });

            modelBuilder.Entity("Academic.Entities.Materie", b =>
                {
                    b.Property<int>("IdMaterie")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_materie")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Cod")
                        .HasColumnName("cod")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Descriere")
                        .HasColumnName("descriere")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Finalizare")
                        .HasColumnName("finalizare")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<int?>("NrCredite")
                        .HasColumnName("nr_credite")
                        .HasColumnType("integer");

                    b.Property<int?>("NrPachet")
                        .HasColumnName("nr_pachet")
                        .HasColumnType("integer");

                    b.Property<string>("Nume")
                        .HasColumnName("nume")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("TipActivitate")
                        .HasColumnName("tip_activitate")
                        .HasColumnType("integer");

                    b.HasKey("IdMaterie")
                        .HasName("materie_pkey");

                    b.ToTable("materie");
                });

            modelBuilder.Entity("Academic.Entities.Orarmaterie", b =>
                {
                    b.Property<TimeSpan>("OraInceput")
                        .HasColumnName("ora_inceput")
                        .HasColumnType("time without time zone");

                    b.Property<TimeSpan>("OraSfarsit")
                        .HasColumnName("ora_sfarsit")
                        .HasColumnType("time without time zone");

                    b.Property<int>("IdMaterie")
                        .HasColumnName("id_materie")
                        .HasColumnType("integer");

                    b.Property<int>("IdProfesor")
                        .HasColumnName("id_profesor")
                        .HasColumnType("integer");

                    b.Property<string>("ZiuaSaptamanii")
                        .HasColumnName("ziua_saptamanii")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Frecventa")
                        .HasColumnName("frecventa")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int>("IdFormatie")
                        .HasColumnName("id_formatie")
                        .HasColumnType("integer");

                    b.Property<int>("IdSpecializare")
                        .HasColumnName("id_specializare")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Data")
                        .HasColumnName("data")
                        .HasColumnType("date");

                    b.Property<int>("IdSala")
                        .HasColumnName("id_sala")
                        .HasColumnType("integer");

                    b.Property<string>("Tip")
                        .HasColumnName("tip")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("OraInceput", "OraSfarsit", "IdMaterie", "IdProfesor", "ZiuaSaptamanii", "Frecventa", "IdFormatie", "IdSpecializare")
                        .HasName("pk_orar_materie");

                    b.HasIndex("IdMaterie");

                    b.HasIndex("IdProfesor");

                    b.HasIndex("IdSala");

                    b.HasIndex("IdFormatie", "IdSpecializare");

                    b.ToTable("orarmaterie");
                });

            modelBuilder.Entity("Academic.Entities.Profesor", b =>
                {
                    b.Property<int>("IdProfesor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_profesor")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Cnp")
                        .HasColumnName("cnp")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Domeniu")
                        .HasColumnName("domeniu")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Grad")
                        .HasColumnName("grad")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<int?>("IdFacultate")
                        .HasColumnName("id_facultate")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_user")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('users_id_user_seq'::regclass)");

                    b.Property<string>("Mail")
                        .HasColumnName("mail")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nume")
                        .HasColumnName("nume")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<BitArray>("PHash")
                        .HasColumnName("p_hash")
                        .HasColumnType("bit varying(255)");

                    b.Property<BitArray>("PSalt")
                        .HasColumnName("p_salt")
                        .HasColumnType("bit varying(255)");

                    b.Property<string>("Prenume")
                        .HasColumnName("prenume")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Site")
                        .HasColumnName("site")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TipUtilizator")
                        .HasColumnName("tip_utilizator")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("IdProfesor")
                        .HasName("profesor_pkey");

                    b.HasIndex("IdFacultate");

                    b.ToTable("profesor");
                });

            modelBuilder.Entity("Academic.Entities.Review", b =>
                {
                    b.Property<int>("IdProfesor")
                        .HasColumnName("id_profesor")
                        .HasColumnType("integer");

                    b.Property<int>("IdMaterie")
                        .HasColumnName("id_materie")
                        .HasColumnType("integer");

                    b.Property<int>("IdCriteriu")
                        .HasColumnName("id_criteriu")
                        .HasColumnType("integer");

                    b.Property<int>("IdStudent")
                        .HasColumnName("id_student")
                        .HasColumnType("integer");

                    b.Property<int>("AnDeStudiu")
                        .HasColumnName("an_de_studiu")
                        .HasColumnType("integer");

                    b.Property<string>("AnCaledaristic")
                        .HasColumnName("an_caledaristic")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Nota")
                        .HasColumnName("nota")
                        .HasColumnType("integer");

                    b.HasKey("IdProfesor", "IdMaterie", "IdCriteriu", "IdStudent", "AnDeStudiu", "AnCaledaristic")
                        .HasName("pk_review");

                    b.HasIndex("IdCriteriu");

                    b.HasIndex("IdMaterie", "IdStudent", "AnDeStudiu", "AnCaledaristic");

                    b.ToTable("review");
                });

            modelBuilder.Entity("Academic.Entities.Sala", b =>
                {
                    b.Property<int>("IdSala")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_sala")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Locatie")
                        .HasColumnName("locatie")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nume")
                        .HasColumnName("nume")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("IdSala")
                        .HasName("sala_pkey");

                    b.ToTable("sala");
                });

            modelBuilder.Entity("Academic.Entities.Specializare", b =>
                {
                    b.Property<int>("IdSpecializare")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_specializare")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Cod")
                        .HasColumnName("cod")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("IdFacultate")
                        .HasColumnName("id_facultate")
                        .HasColumnType("integer");

                    b.Property<string>("Nume")
                        .HasColumnName("nume")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("IdSpecializare")
                        .HasName("specializare_pkey");

                    b.HasIndex("IdFacultate");

                    b.ToTable("specializare");
                });

            modelBuilder.Entity("Academic.Entities.Student", b =>
                {
                    b.Property<int>("IdStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_student")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Cnp")
                        .HasColumnName("cnp")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Cup")
                        .HasColumnName("cup")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("IdFormatie")
                        .HasColumnName("id_formatie")
                        .HasColumnType("integer");

                    b.Property<int?>("IdSpecializare")
                        .HasColumnName("id_specializare")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_user")
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('users_id_user_seq'::regclass)");

                    b.Property<string>("NrMatricol")
                        .HasColumnName("nr_matricol")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Nume")
                        .HasColumnName("nume")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<BitArray>("PHash")
                        .HasColumnName("p_hash")
                        .HasColumnType("bit varying(255)");

                    b.Property<BitArray>("PSalt")
                        .HasColumnName("p_salt")
                        .HasColumnType("bit varying(255)");

                    b.Property<string>("Prenume")
                        .HasColumnName("prenume")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TipUtilizator")
                        .HasColumnName("tip_utilizator")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("IdStudent")
                        .HasName("student_pkey");

                    b.HasIndex("IdFormatie", "IdSpecializare");

                    b.ToTable("student");
                });

            modelBuilder.Entity("Academic.Entities.Users", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id_user")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Cnp")
                        .HasColumnName("cnp")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Nume")
                        .HasColumnName("nume")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<BitArray>("PHash")
                        .HasColumnName("p_hash")
                        .HasColumnType("bit varying(255)");

                    b.Property<BitArray>("PSalt")
                        .HasColumnName("p_salt")
                        .HasColumnType("bit varying(255)");

                    b.Property<string>("Prenume")
                        .HasColumnName("prenume")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TipUtilizator")
                        .HasColumnName("tip_utilizator")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("IdUser")
                        .HasName("users_pkey");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Academic.Entities.Admin", b =>
                {
                    b.HasOne("Academic.Entities.Specializare", "IdSpecializareNavigation")
                        .WithMany("Admin")
                        .HasForeignKey("IdSpecializare")
                        .HasConstraintName("fk_specializare")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Academic.Entities.Contractdestudiu", b =>
                {
                    b.HasOne("Academic.Entities.Student", "IdStudentNavigation")
                        .WithMany("Contractdestudiu")
                        .HasForeignKey("IdStudent")
                        .HasConstraintName("fk_student")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Academic.Entities.Detaliucontract", b =>
                {
                    b.HasOne("Academic.Entities.Materie", "IdMaterieNavigation")
                        .WithMany("Detaliucontract")
                        .HasForeignKey("IdMaterie")
                        .HasConstraintName("fk_materie")
                        .IsRequired();

                    b.HasOne("Academic.Entities.Contractdestudiu", "Contractdestudiu")
                        .WithMany("Detaliucontract")
                        .HasForeignKey("IdStudent", "AnDeStudiu", "AnCalendaristic")
                        .HasConstraintName("fk_contract_de_studiu")
                        .IsRequired();
                });

            modelBuilder.Entity("Academic.Entities.Formatie", b =>
                {
                    b.HasOne("Academic.Entities.Specializare", "IdSpecializareNavigation")
                        .WithMany("Formatie")
                        .HasForeignKey("IdSpecializare")
                        .HasConstraintName("fk_specializare")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Academic.Entities.Orarmaterie", b =>
                {
                    b.HasOne("Academic.Entities.Materie", "IdMaterieNavigation")
                        .WithMany("Orarmaterie")
                        .HasForeignKey("IdMaterie")
                        .HasConstraintName("fk_materie")
                        .IsRequired();

                    b.HasOne("Academic.Entities.Profesor", "IdProfesorNavigation")
                        .WithMany("Orarmaterie")
                        .HasForeignKey("IdProfesor")
                        .HasConstraintName("fk_profesor")
                        .IsRequired();

                    b.HasOne("Academic.Entities.Sala", "IdSalaNavigation")
                        .WithMany("Orarmaterie")
                        .HasForeignKey("IdSala")
                        .HasConstraintName("fk_sala")
                        .IsRequired();

                    b.HasOne("Academic.Entities.Formatie", "Id")
                        .WithMany("Orarmaterie")
                        .HasForeignKey("IdFormatie", "IdSpecializare")
                        .HasConstraintName("fk_formatie")
                        .IsRequired();
                });

            modelBuilder.Entity("Academic.Entities.Profesor", b =>
                {
                    b.HasOne("Academic.Entities.Facultate", "IdFacultateNavigation")
                        .WithMany("Profesor")
                        .HasForeignKey("IdFacultate")
                        .HasConstraintName("fk_facultate")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Academic.Entities.Review", b =>
                {
                    b.HasOne("Academic.Entities.Criteriu", "IdCriteriuNavigation")
                        .WithMany("Review")
                        .HasForeignKey("IdCriteriu")
                        .HasConstraintName("fk_criteriu")
                        .IsRequired();

                    b.HasOne("Academic.Entities.Profesor", "IdProfesorNavigation")
                        .WithMany("Review")
                        .HasForeignKey("IdProfesor")
                        .HasConstraintName("fk_profesor")
                        .IsRequired();

                    b.HasOne("Academic.Entities.Detaliucontract", "Detaliucontract")
                        .WithMany("Review")
                        .HasForeignKey("IdMaterie", "IdStudent", "AnDeStudiu", "AnCaledaristic")
                        .HasConstraintName("fk_detaliu_contract")
                        .IsRequired();
                });

            modelBuilder.Entity("Academic.Entities.Specializare", b =>
                {
                    b.HasOne("Academic.Entities.Facultate", "IdFacultateNavigation")
                        .WithMany("Specializare")
                        .HasForeignKey("IdFacultate")
                        .HasConstraintName("fk_facultate")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Academic.Entities.Student", b =>
                {
                    b.HasOne("Academic.Entities.Formatie", "Id")
                        .WithMany("Student")
                        .HasForeignKey("IdFormatie", "IdSpecializare")
                        .HasConstraintName("fk_formatie")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
